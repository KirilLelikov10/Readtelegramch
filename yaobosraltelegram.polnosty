from telethon import TelegramClient, events
from gtts import gTTS
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
api_id = 27099009
api_hash = '317f31335591bf7f9fbd130848bee4e7'
phone_number = '+380965123562'

# –†–µ–∂–∏–º multi-read
MULTIREAD = True  # True - —á–∏—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, False - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ MULTIREAD=False)
channel_name = '‚àÜ‚úôüçí–ì–Ω–∏–ª–∞ —á–µ—Ä–µ—à–Ω—èüá∫üá¶‚úô‚àÜ'

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è multi-read —Ä–µ–∂–∏–º–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ -> –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è)
chs = {
    "‚àÜ‚úôüçí–ì–Ω–∏–ª–∞ —á–µ—Ä–µ—à–Ω—èüá∫üá¶‚úô‚àÜ": "–ó–≥–Ω–∏–≤—à–∞ —á–µ—Ä–µ—à–Ω—è",
    "‚úô –ó–°–£ HUB ‚ö°Ô∏èMonitoring ‚úô": "–ó–ê–ë–£–•–ê–ë",
    "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ ‚Üí by HLEP": "–ë–∞–π —Ö–ª–µ–±—É—à–µ–∫",
    "Testodlabota": "—Ç–µ—Å—Ç–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞
speech_speed = 1.2  # 1.0 - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, 0.8 - –º–µ–¥–ª–µ–Ω–Ω–æ, 1.5 - –±—ã—Å—Ç—Ä–µ–µ
volume_level = 1.5  # 1.0 = 100%, 1.5 = 150%, 2.0 = 200%

async def main():
    async with TelegramClient('userbot_session', api_id, api_hash) as client:
        await client.start(phone_number)

        dialogs = await client.get_dialogs()

        # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("\nüìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
        for d in dialogs:
            if d.is_channel:
                print(f"Channel: {d.name} - ID: {d.id}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º d.id –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è SINGLE-READ —Ä–µ–∂–∏–º–∞
        if not MULTIREAD:
            channel = next((d for d in dialogs if d.is_channel and d.name == channel_name), None)
            if not channel:
                print(f'‚ùå –ö–∞–Ω–∞–ª "{channel_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return
            channels = {channel.id: channel_name}

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è MULTI-READ —Ä–µ–∂–∏–º–∞
        else:
            channels = {d.id: chs[d.name] for d in dialogs if d.is_channel and d.name in chs}

        if not channels:
            print("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return

        print(f'\n‚úÖ –ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ –∫–∞–Ω–∞–ª–∞–º–∏: {", ".join(channels.values())}')

        @client.on(events.NewMessage())
        async def handler(event):
            chat_id = event.chat_id
            chat_title = None

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            for d in dialogs:
                if d.is_channel and d.id == chat_id:
                    chat_title = d.name
                    break

            # –í—ã–≤–æ–¥ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ)
            print(f'\nüì© –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ "{chat_title if chat_title else chat_id}": {event.message.text}')

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if chat_id not in channels:
                print("‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)")
                return

            text = event.message.text
            if not text:
                print("‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
                return

            channel_title = channels[chat_id]
            print(f'üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ "{channel_title}"')

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Ç–µ–∫—Å—Ç
            full_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_title}. {text}"

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—á–∏
            tts = gTTS(full_text, lang="uk", slow=False)
            tts.save("message.mp3")

            # –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–µ—á–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ FFmpeg
            os.system(f"ffmpeg -y -i message.mp3 -filter:a \"atempo={speech_speed}, volume={volume_level}\" message_out.mp3")

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤ Termux (–µ—Å–ª–∏ –µ—Å—Ç—å mpv)
            os.system("mpv message_out.mp3")

        await client.run_until_disconnected()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
